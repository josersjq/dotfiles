" vim-plug
call plug#begin('~/.vim/plugged')

" Utilites
Plug 'kien/ctrlp.vim'
Plug 'FelikZ/ctrlp-py-matcher'
Plug 'scrooloose/nerdtree' , { 'on': 'NERDTreeToggle' } | Plug 'ryanoasis/vim-devicons'
Plug 'Raimondi/delimitMate'
Plug 'garbas/vim-snipmate'
Plug 'editorconfig/editorconfig-vim'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'bling/vim-airline'
Plug 'vim-scripts/gitignore'
Plug 'scrooloose/syntastic'

" Edit
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth' " detect indent style (tabs vs. spaces)
Plug 'terryma/vim-expand-region'
Plug 'ervandew/supertab'

" Git
Plug 'tpope/vim-fugitive'

" Colorscheme
Plug 'junegunn/seoul256.vim'
Plug 'junegunn/goyo.vim', { 'on': 'Goyo' } " distraction-free writing
Plug 'junegunn/limelight.vim', { 'on': 'Limelight' } " focus tool. Good for presentating with vim

" Colors
Plug 'tomasr/molokai'
Plug 'chriskempson/vim-tomorrow-theme'

" Tmux
Plug 'christoomey/vim-tmux-navigator'

" HTML
Plug 'mattn/emmet-vim', { 'for': 'html' }
Plug 'othree/html5.vim', { 'for': 'html' }
Plug 'gregsexton/MatchTag', { 'for': 'html' }

" Javascript
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'jelera/vim-javascript-syntax', { 'for': 'javascript' }
Plug 'moll/vim-node', { 'for': 'javascript'}
Plug 'mxw/vim-jsx', { 'for': 'jsx' }
Plug 'elzr/vim-json', { 'for': 'json' }

" CSS
Plug 'hail2u/vim-css3-syntax', { 'for': 'css' }
Plug 'ap/vim-css-color', { 'for': 'css' }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }

call plug#end()

" General Settings
filetype on
filetype plugin indent off
syntax on
se t_Co=256
se background=dark
colo seoul256

se encoding=utf-8
se ttyfast
se undolevels=250
se textwidth=100
se showmatch
se visualbell
se textwidth=100
se cursorline
se number
se noshowcmd
se noshowmode

se listchars=tab:——,trail:·,extends:>,precedes:<,nbsp:%
se list
se linebreak
se showbreak=…

se foldmethod=syntax
se foldnestmax=10
se nofoldenable
se foldlevel=2
nn <space> za
vn <space> zf

let mapleader=' '
let maplocalleader = ' '

ino jj <esc>

" Automatically removing all trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" Expand Visual mode
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Save file
nn <Leader>w :w<CR>

" Save the file as sudo then reload it manually with `:edit!`
no <Leader>W :silent w !sudo tee % > /dev/null

" Clear the last search highlights
no <Leader>c :noh<CR>

" Reload vimrc
no <Leader>R :so ~/.vimrc<CR>

" disable EX mode
noremap Q <NOP>

" Command Line to quit
map q: :q

" Search
se hlsearch
se smartcase
se incsearch

" Indentions
nn <Tab> >>_
nn <S-Tab> <<_
ino <S-Tab> <C-D>
vn <Tab> >gv
vn <S-Tab> <gv

" Paste mode
se pastetoggle=<F2>

" Python Highly Recommends in https://code.djangoproject.com/wiki/UsingVimWithDjango
au FileType python se sts=4
au FileType python se colorcolumn=80,100

" Disable Backup files
se nobackup
se nowritebackup
se noswapfile

" Normal mode map ; to :
nn ; :

" Disalbe Arrow keys
map <up>    <nop>
map <down>  <nop>
map <left>  <nop>
map <right> <nop>
ino <up> <nop>
ino <down> <nop>
ino <left> <nop>
ino <right> <nop>

" Split Settings
nnoremap > <c-w>w
nnoremap < <c-w>W

se splitright
se splitbelow

" Tab Navigation
nn th :tabprev<CR>
nn tl :tabnext<CR>
nn tn :tabnew<CR>
nn tt :tabedit<CR>
nn td :tabclose<CR>

" NERDTree
let g:NERDTreeQuitOnOpen=0
let NERDTreeShowHidden=1
let g:NERDTreeWinPos = "right"
nm <leader>n :NERDTreeToggle<CR>

" ctrlp
let g:ctrlp_show_hidden=1
let g:ctrlp_use_caching = 0
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

" Airline
let g:airline_powerline_fonts = 1
let g:airline_theme='tomorrow'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#whitespace#enabled = 0
se laststatus=2 " set airline to appear at status all time

" Emmet
let user_emmet_expandabbr_key='<c-e>'

" vim-commentary to Ctrl+C
nm <C-c> gc
xm <C-c> gc

" Syntastic
se statusline+=%#warningmsg#
se statusline+=%{SyntasticStatuslineFlag()}
se statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_python_exec = '/usr/bin/python3'

" Goyo && Limelight
let g:limelight_paragraph_span = 1
let g:limelight_priority = -1

function! s:goyo_enter()
  if exists('$TMUX')
    silent !tmux set status off
  endif
  set scrolloff=999
  se linespace=7
  se fullscreen
  let g:NERDTreeQuitOnOpen=1
  Limelight
endfunction

function! s:goyo_leave()
  if exists('$TMUX')
    silent !tmux set status on
  endif
  se scrolloff=5
  se nofullscreen
  se linespace=0
  let g:NERDTreeQuitOnOpen=0
  Limelight!
endfunction

nn <Leader>g :Goyo<CR>
nmap <Leader>l :Limelight!!<CR>
xmap <Leader>l :Limelight!!<CR>

" Goyo-Limelight Integration
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" Ignores
source ~/.vim/ignores/ignore.vim
